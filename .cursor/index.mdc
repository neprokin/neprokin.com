# Project Rules для neprokin.com

## Общие принципы
- Следуй принципам SOLID и чистой архитектуры
- Создавай маленькие, тестируемые функции
- Разделяй бизнес-логику и представление
- Всегда добавляй типизацию TypeScript
- Используй современные практики веб-разработки 2025

## Архитектура проекта
- **Astro 4.x** для статической генерации и Islands Architecture
- **Obsidian** как headless CMS с Markdown файлами
- **Tailwind CSS + CSS Variables** для кастомного UI-kit
- **TypeScript** для всего кода
- **Vite** как bundler и dev server

## Стиль кода
- Именуй компоненты в PascalCase (Button, Header, BlogPost)
- Используй camelCase для переменных и функций
- Добавляй TypeScript типы для всех props, функций и API
- Используй интерфейсы для сложных типов данных
- Следуй принципам DRY, KISS, YAGNI

## Структура файлов
```
src/
├── components/           # UI компоненты
│   ├── ui/              # Базовые UI элементы (Button, Input)
│   ├── layout/          # Лейауты (Header, Footer, Navigation)
│   └── content/         # Контент компоненты (BlogPost, ProjectCard)
├── styles/              # Стили и UI-kit
│   ├── base.css         # CSS переменные и базовые стили
│   ├── components.css   # Стили компонентов
│   └── utilities.css    # Utility классы
├── pages/               # Astro страницы
├── layouts/             # Базовые лейауты
├── utils/               # Утилиты и хелперы
└── types/               # TypeScript типы
```

## Obsidian интеграция
- Контент хранится в папке `content/` как Markdown файлы
- Используй YAML frontmatter для метаданных
- Поддерживай Obsidian ссылки `[[]]` через remark-wiki-link
- Обрабатывай изображения и медиа из Obsidian vault
- Создавай типизированные коллекции для разных типов контента

## UI-Kit принципы
- Используй CSS Custom Properties для темизации
- Создавай атомарные компоненты (Atomic Design)
- Поддерживай темную/светлую тему
- Обеспечивай полную адаптивность (mobile-first)
- Используй семантические HTML теги

## Производительность
- Минимизируй JavaScript bundle (Islands Architecture)
- Оптимизируй изображения автоматически
- Используй статическую генерацию где возможно
- Добавляй lazy loading для контента
- Стремись к Lighthouse Score 100/100

## Безопасность
- Валидируй все входные данные
- Не храни секреты в коде
- Используй Content Security Policy
- Логируй ошибки, но не секреты
- Используй HTTPS для всех внешних запросов

## Тестирование
- Создавай unit тесты для утилит и функций
- Тестируй компоненты с помощью Vitest
- Проверяй accessibility с помощью axe
- Тестируй производительность регулярно

## Git и развертывание
- Используй Conventional Commits
- Создавай осмысленные commit сообщения
- Используй feature branches для новых функций
- Автоматический деплой на Vercel/Netlify
- Настрой pre-commit hooks для линтинга

## Markdown обработка
- Используй unified.js экосистему (remark/rehype)
- Добавляй подсветку синтаксиса кода
- Поддерживай математические формулы
- Генерируй table of contents автоматически
- Оптимизируй чтение времени и SEO метаданные