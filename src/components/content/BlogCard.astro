---
import Card from '../ui/Card.astro';
import Badge from '../ui/Badge.astro';
import type { BlogPost } from '../../types/content';

export interface Props {
  post: BlogPost;
  featured?: boolean;
  class?: string;
}

const { post, featured = false, class: className = '' } = Astro.props;

const publishDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
}).format(post.data.publishDate);

const maxTags = featured ? 3 : 4;
---

<Card class={className}>
  {featured && (
    <div class="card-header">
      <Badge>Featured</Badge>
      <span class="body text-secondary">{publishDate}</span>
    </div>
  )}
  
  {!featured && (
    <div class="flex justify-between items-start mb-3">
      <h3 class="body-large">
        <a href={`/blog/${post.slug}`} class="text-accent">{post.data.title}</a>
      </h3>
      <span class="body text-secondary">{publishDate}</span>
    </div>
  )}
  
  {featured && (
    <h3 class="body-large mb-3">
      <a href={`/blog/${post.slug}`} class="text-accent">{post.data.title}</a>
    </h3>
  )}
  
  <p class="body text-secondary card-content">{post.data.description}</p>
  
  {post.data.tags && post.data.tags.length > 0 && (
    <div class={`badge-group ${featured ? 'mb-4' : ''}`}>
      {post.data.tags.slice(0, maxTags).map((tag) => (
        <Badge>{tag}</Badge>
      ))}
    </div>
  )}
  
  {featured && (
    <div class="card-footer">
      <a href={`/blog/${post.slug}`} class="body text-accent">Read Article â†’</a>
      {post.data.readingTime && (
        <span class="body text-secondary">{post.data.readingTime} min read</span>
      )}
    </div>
  )}
</Card>
