---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Badge from '../../components/ui/Badge.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();

// Форматирование даты
const publishDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long', 
  day: 'numeric'
}).format(post.data.publishDate);
---

<Layout 
  title={post.data.title}
  description={post.data.description}
>
  <main class="container">
    <!-- Article Header -->
    <header style="padding: 64px 0 32px; max-width: 800px; margin: 0 auto;">
      <h1 class="h1 text-accent" style="margin-bottom: 16px;">{post.data.title}</h1>
      <p class="body-large text-secondary" style="margin-bottom: 24px;">{post.data.description}</p>
      
      <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center; margin-bottom: 32px;">
        <span class="body text-secondary">Published {publishDate}</span>
        {post.data.readingTime && (
          <span class="body text-secondary">• {post.data.readingTime} min read</span>
        )}
        <span class="body text-secondary">• by {post.data.author}</span>
      </div>
      
      {post.data.tags && (
        <div style="display: flex; gap: 8px; flex-wrap: wrap;">
          {post.data.tags.map((tag) => (
            <Badge>{tag}</Badge>
          ))}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <article style="max-width: 800px; margin: 0 auto; padding-bottom: 64px;">
      <div class="prose">
        <Content />
      </div>
    </article>

    <!-- Navigation -->
    <nav style="max-width: 800px; margin: 0 auto; padding: 32px 0; border-top: 1px solid var(--border-color);">
      <a href="/blog" class="body text-accent">← Back to Blog</a>
    </nav>
  </main>
</Layout>

<style>
  .prose {
    color: var(--text);
  }
  
  .prose h1, .prose h2, .prose h3 {
    color: var(--accent);
    margin-top: 32px;
    margin-bottom: 16px;
  }
  
  .prose h1 { font-size: var(--font-size-h2); line-height: var(--line-height-h2); }
  .prose h2 { font-size: 24px; line-height: 28px; }
  .prose h3 { font-size: var(--font-size-body-large); line-height: var(--line-height-body-large); }
  
  .prose p {
    font-size: var(--font-size-body);
    line-height: var(--line-height-body);
    margin-bottom: 16px;
  }
  
  .prose code {
    background-color: var(--surface);
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .prose pre {
    background-color: var(--surface);
    padding: 20px;
    border-radius: 8px;
    overflow-x: auto;
    margin: 24px 0;
  }
  
  .prose blockquote {
    border-left: 4px solid var(--accent);
    padding-left: 20px;
    margin: 24px 0;
    font-style: italic;
    color: var(--text-muted);
  }
  
  .prose ul, .prose ol {
    margin: 16px 0;
    padding-left: 24px;
  }
  
  .prose li {
    margin-bottom: 8px;
  }
</style>
